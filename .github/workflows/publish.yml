#  workflow pipeline
name: publish

on:
    release:
        types: [ published ]

jobs:
    publish-package:
        runs-on: ubuntu-latest
        environment: staging

        steps:
            -   uses: actions/checkout@v2
                with:
                    submodules: 'true'

            -   name: Configure AWS credentials
                uses: aws-actions/configure-aws-credentials@v1
                with:
                    aws-access-key-id: ${{ vars.DEPLOY_AGENT_ACCESS_KEY_ID }}
                    aws-secret-access-key: ${{ secrets.DEPLOY_AGENT_SECRET_ACCESS_KEY }}
                    aws-region: us-west-2
                    role-to-assume: arn:aws:iam::875886734390:role/npm-repository-publisher-20220519210503438100000002
                    role-duration-seconds: 3600

            -   name: Install Foundry
                uses: foundry-rs/foundry-toolchain@v1

            -   name: Set up Node
                uses: actions/setup-node@v2
                with:
                    node-version: "16.x"
                    cache: "yarn"

            -   name: Enable Node Corepack
                run: corepack enable

            -   name: Install packages
                run: yarn install

            -   name: Generate version for Typescript
                id: package-version
                run: echo ::set-output name=PACKAGE_VERSION::${GITHUB_REF#refs/*/}

            -   name: Update package name for Typescript
                run: |
                    sed -i 's/@dinari\/sbt-contracts/@dinari\/sbt-contracts-${{ steps.package-version.outputs.PACKAGE_VERSION }}/g' package.json
                    sed -i 's/@dinari\/sbt-contracts/@dinari\/sbt-contracts-${{ steps.package-version.outputs.PACKAGE_VERSION }}/g' yarn.lock

            -   name: Set package version for Typescript
                run: yarn ci:publish:build:set-version ${{ steps.package-version.outputs.PACKAGE_VERSION }}

            -   name: Publish Typescript library
                run: yarn ci:publish:typescript

#            -   name: Notify Typescript Build
#                uses: slackapi/slack-github-action@v1.16.0
#                with:
#                    channel-id: "#ci"
#                    slack-message: "@${{ github.actor }} built `${{ github.repository }}`\n>Branch: `${{ github.ref_name }}`\n>Commit: `${{ github.sha }}`\n>Package [NPM]: `@dinari/sbt-contracts:${{ steps.package-version.outputs.PACKAGE_VERSION }}`"
#                env:
#                    SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

            -   name: Set up Python
                uses: actions/setup-python@v4
                with:
                    python-version: "3.x"

            -   name: Install pypa/build
                run: >-
                    python -m
                    pip install
                    build
                    twine
                    --user

            -   name: Build Python library
                run: yarn ci:publish:build:python

            -   name: Update package name for Python
                run: |
                    sed -i 's/dinari-sbt-contracts/dinari-sbt-contracts-${{ steps.package-version.outputs.PACKAGE_VERSION }}/g' ./dist/python/pyproject.toml
                    sed -i 's/LATEST/${{ steps.package-version.outputs.PACKAGE_VERSION }}/g' ./dist/python/pyproject.toml

            -   name: Publish Python library
                run: |
                    export TWINE_USERNAME=aws
                    export TWINE_PASSWORD=`aws codeartifact get-authorization-token --domain sbt-dev --query authorizationToken --output text`
                    export TWINE_REPOSITORY_URL=`aws codeartifact get-repository-endpoint --domain sbt-dev --repository sbt --format pypi --query repositoryEndpoint --output text`
                    python -m build --sdist --wheel --outdir dist/ .
                    twine upload dist/*

#            -   name: Notify Python Build
#                uses: slackapi/slack-github-action@v1.16.0
#                with:
#                    channel-id: "#ci"
#                    slack-message: "@${{ github.actor }} built `${{ github.repository }}`\n>Branch: `${{ github.ref_name }}`\n>Commit: `${{ github.sha }}`\n>Package [PyPi]: `dinari-sbt-contracts:${{ steps.package-version.outputs.PACKAGE_VERSION }}`"
#                env:
#                    SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
